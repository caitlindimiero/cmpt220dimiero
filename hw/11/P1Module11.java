import java.util.Scanner;
public class P1Module11 {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in); // Input Scanner
        System.out.println("Enter the number of items: "); // Get user input for num of items
        int itemCount = input.nextInt();
        double[] weights = new double[itemCount];
        System.out.println("Enter the weights for each item: "); // Get user input for weights of items
        for (int i = 0; i < itemCount; i++) {
            weights[i] = input.nextDouble();
        }
        System.out.println("Enter the weight limit for the bag: "); // Get user input for weight limit
        int weightLimit = input.nextInt();
        System.out.println("The maximum weight for the items placed in the bag is " + m(itemCount, weightLimit, weights)); // Get user input for max weight
        input.close(); // Close scanner
    }
    public static double m(int i, double weightLimit, double[] w) {
        if (i < 0) return 0; // m(0. weightLimit) = 0;
		if (weightLimit < 0) return 0; // m(i, 0) = 0;
		// return 0 if the itemcount or weightLimit 0
        if (w[i-1] > weightLimit) return m(i-2, weightLimit, w); // if the weight of the current item (i) is greater than 
        // weightLimit, check the next item's (recurse).
        // m(i,w) = m(i-1, weightLimit); if w1 > weightLimit
        return Math.max(m(i - 2, weightLimit, w), w[i-1] + m(i - 2, weightLimit - w[i-1], w));  // return the greater number between the next item's weight or the weight of
        // the next item taking into account the current item's weight in the knapsack
        // (the remaining weight in the knapsack becomes the new `weightLimit`)
        // m(i,w) = max(m(i - 1, weightLimit), w1 + m(i - 1, weightLimit - w1));
    }

}






























































































































































































































































































































































































































































